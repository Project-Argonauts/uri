//-----------------------------------------------------------------------------------------
// uri (header only)
// Copyright (C) 2024 Fix8 Market Technologies Pty Ltd
//   by David L. Dight
// see https://github.com/fix8mt/uri
//
// Lightweight header-only C++20 URI parser
//
// Distributed under the Boost Software License, Version 1.0 August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//-----------------------------------------------------------------------------------------
#include <iostream>
#include <vector>
#include <stdexcept>
#include <string_view>
#include <getopt.h>
#include <fix8/uri.hpp>

//-----------------------------------------------------------------------------------------
using namespace FIX8;
using enum uri::component;

//-----------------------------------------------------------------------------------------
#include "uriexamples.hpp"

//-----------------------------------------------------------------------------------------
int main(int argc, char *argv[])
{
   static constexpr const char *optstr{"t:hlasx"};
   static constexpr const std::array long_options
   {
      option{ "help",	no_argument,         nullptr, 'h' },
      option{ "list",	no_argument,         nullptr, 'l' },
      option{ "sizes",	no_argument,         nullptr, '2' },
      option{ "all",		no_argument,         nullptr, 'a' },
      option{ "extra",	no_argument,         nullptr, 'x' },
      option{ "test",	required_argument,   nullptr, 't' },
      option{}
   };

	for (int val; (val = getopt_long (argc, argv, optstr, long_options.data(), 0)) != -1; )
	{
		try
		{
			switch (val)
			{
			case ':': case '?':
				std::cout << '\n';
				[[fallthrough]];
			case 'h':
				std::cout << "Usage: " << argv[0] << " [-" << optstr << "]" << R"(
 -t [num] test to run
 -l list tests
 -s show sizes
 -x extra sizes
 -a run all tests
 -h help)" << '\n';
				break;
			case 'l':
				for (int ii{}; ii < tests.size(); ++ii)
					std::cout << ii << '\t' << tests[ii].first << '\n';
				break;
			case 't':
				if (const auto tnum {std::stoul(optarg)}; tnum >= tests.size())
					throw std::range_error("invalid test case");
				else
					std::cout << uri{tests[tnum].first};
				break;
			case 's':
				std::cout << "uri: " << sizeof(uri) << "\nbasic_uri: " << sizeof(basic_uri) << '\n';
				break;
			case 'x':
				{
					/*
					uri u1{"https://www.example.com:8080/pages%2a/from%2b?country=au%2c&state=nsw&%2dcity=sydney&zone=au&noval%2d"};
					std::cout << std::boolalpha << uri::has_hex(u1.get_source()) << '\n';
					std::cout << u1.replace(uri::decode_hex(u1.get_source())) << '\n';
					std::cout << std::boolalpha << uri::has_hex(u1.get_source()) << '\n';
					std::cout << u1 << '\n';
					auto result { u1.decode_query()};
					for (const auto& pp : result)
						std::cout << pp.first << " => " << pp.second << '\n';
						*/
					uri u1{ "https://www.netmeister.org/%62%6C%6F%67/%75%72%6C%73.%68%74%6D%6C?!@#$%25=+_)(*&^#top%3C"};
					std::cout << u1;
				}
				break;
			case 'a':
				for (const auto& [src,vec] : tests)
					std::cout << uri{src} << '\n';
				std::cout << tests.size() << " test cases\n";
				break;
			default:
				break;
			}
		}
		catch (const std::exception& e)
		{
			std::cerr << "exception: " << e.what();
			if (optarg)
				std::cerr << " (" << static_cast<char>(val) << ':' << optarg << ')';
			std::cerr << std::endl;
			return 1;
		}
	}
	return 0;
}

