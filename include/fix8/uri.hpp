//-----------------------------------------------------------------------------------------
// uri (header only)
// Copyright (C) 2024 Fix8 Market Technologies Pty Ltd
//   by David L. Dight
// see https://github.com/fix8mt/uri
//
// Lightweight header-only C++20 URI parser
//
// Distributed under the Boost Software License, Version 1.0 August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//----------------------------------------------------------------------------------------
#ifndef FIX8_URI_HPP_
#define FIX8_URI_HPP_

//----------------------------------------------------------------------------------------
#include <iostream>
#include <iomanip>
#include <type_traits>
#include <array>
#include <algorithm>
#include <cstring>
#include <string>
#include <string_view>
#include <functional>
#include <stdexcept>
#include <ranges>
#include <bitset>
#include <utility>
#include <concepts>
#include <set>
#include <unordered_set>

//-----------------------------------------------------------------------------------------
namespace FIX8 {

//-----------------------------------------------------------------------------------------
class uri
{
public:
	enum uri_components : unsigned { scheme, userinfo, host, port, path, query, fragment, count };
private:
	std::string_view _source;
	std::array<std::pair<std::string::size_type, std::string::size_type>, uri_components::count> _ranges;
	std::bitset<uri_components::count> _present;
	static constexpr const std::array uri_names { "scheme", "userinfo", "host", "port", "path", "query", "fragment" };
public:
	constexpr uri(std::string_view src) : _source(src) { parse(); }
	constexpr uri() = default;
	~uri() = default;

	constexpr std::string_view get_component(uri_components what) const
	{
		if (what < count)
			return _source.substr(_ranges[what].first, _ranges[what].second);
		throw(std::out_of_range("invalid component index"));
	}
	constexpr std::string_view get_name(uri_components what) const
	{
		if (what < count)
			return uri_names[what];
		throw(std::out_of_range("invalid component index"));
	}

	constexpr int parse()
	{
		if (_source.find_first_of("\t\r\n ") != std::string::npos)
			throw(std::logic_error("invalid uri"));
		std::string::size_type pos{}, prt{}, hst{};
		if (auto sch {_source.find_first_of(':')}; sch != std::string::npos)
		{
			_ranges[scheme] = std::make_pair(0, sch);
			_present.set(scheme);
			pos = sch + 1;
			//std::cout << "pos=" << pos << ",sch=" << sch << '\n';
		}
		if (auto auth {_source.find_first_of("//", pos)}; auth != std::string::npos)
		{
			auth += 2;
			if (auto usr {_source.find_first_of('@', auth)}; usr != std::string::npos)
			{
				_ranges[userinfo] = std::make_pair(auth, usr - auth);
				_present.set(userinfo);
				hst = pos = usr + 1;
			}
			else
				hst = pos = auth;

			if ((prt = _source.find_first_of(':', pos)) != std::string::npos)
			{
				++prt;
				_ranges[port] = std::make_pair(prt, _source.size() - prt);
				_present.set(port);
			}
		}
		auto pth {_source.find_first_of('/', pos)};
		if (pth != std::string::npos)
		{
			if (_present[port])
			{
				_ranges[port].second = pth - _ranges[port].first;
				_ranges[host] = std::make_pair(hst, _ranges[port].first - 1 - hst);
			}
			else
				_ranges[host] = std::make_pair(hst, _source.size() - hst - 1);
			_present.set(host);

			_ranges[path] = std::make_pair(pth, _source.size() - pth);
			_present.set(path);
			pos += _ranges[path].second;
		}
		if (pth == std::string::npos)
		{
			_ranges[path] = std::make_pair(pos, _source.size() - pos);
			_present.set(path);
		}
		return 0;
	}

	friend std::ostream& operator<<(std::ostream& os, const uri& what)
	{
		os << what._source << '\n';
		for (int ii{}; ii < count; ++ii)
		{
			if (what._present[ii])
			{
				os << uri_names[ii] << ": " << what._source.substr(what._ranges[ii].first, what._ranges[ii].second) << '\n';
				os << '\t' << what._ranges[ii].first << '(' << what._ranges[ii].second << ")\n";
			}
		}
		return os;
	}
};

} // FIX8
#endif // FIX8_URI_HPP_
