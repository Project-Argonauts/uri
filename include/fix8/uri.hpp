//-----------------------------------------------------------------------------------------
//
// uri (header only)
// Copyright (C) 2024 Fix8 Market Technologies Pty Ltd
//   by David L. Dight
// see https://github.com/fix8mt/uri
//
// Lightweight header-only C++20 URI parser
//
// Distributed under the Boost Software License, Version 1.0 August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//----------------------------------------------------------------------------------------
#ifndef FIX8_URI_HPP_
#define FIX8_URI_HPP_

//----------------------------------------------------------------------------------------
#include <iostream>
#include <iomanip>
#include <type_traits>
#include <array>
#include <string>
#include <string_view>
#include <stdexcept>
#include <utility>
#include <cstdint>
#include <bit>

//-----------------------------------------------------------------------------------------
namespace FIX8 {

//-----------------------------------------------------------------------------------------
class basic_uri
{
public:
	using value_pair = std::pair<std::string_view, std::string_view>;
	using query_result = std::vector<value_pair>;
	static constexpr const auto uri_max_len {UINT16_MAX};
	using uri_len_t = std::uint16_t;
	using range_pair = std::pair<uri_len_t, uri_len_t>; // offset, len
	enum component : uri_len_t { scheme, authority, user, password, host, port, path, query, fragment, countof };
private:
	std::string_view _source;
	std::array<range_pair, component::countof> _ranges{};
	uri_len_t _present{};
	static constexpr const std::array component_names { "scheme", "authority", "user", "password", "host", "port", "path", "query", "fragment", };
public:
	constexpr basic_uri(std::string_view src) : _source(src) { parse(); }
	constexpr basic_uri() = default;
	~basic_uri() = default;

	constexpr int assign(std::string_view src)
	{
		_source = src;
		_present = 0;
		return parse();
	}
	constexpr std::string_view get_source() const noexcept { return _source; }
	constexpr std::string_view get(component what) const noexcept { return _source.substr(_ranges[what].first, _ranges[what].second); }
	constexpr std::string_view get_component(component what) const
	{
		if (what < countof)
			return get(what);
		throw(std::out_of_range("invalid component index"));
	}

	/*! Provides const direct access to the offset and length of the specifed component and is used to create a `std::string_view`.
	  	\param idx index into table
		\return a `const range_pair&` which is a `std::pair<uri_len_t, uri_len_t>&` to the specified component at the index given in the ranges table. */
	constexpr const range_pair& operator[](component idx) const noexcept { return _ranges[idx]; }

	/*! Provides direct access to the offset and length of the specifed component and is used to create a `std::string_view`. USE CAREFULLY.
	  	\param idx index into table
		\return a `range_pair&` which is a `std::pair<uri_len_t, uri_len_t>&` to the specified component at the index given in the ranges table. */
	constexpr range_pair& operator[](component idx) noexcept { return _ranges[idx]; }

	constexpr value_pair get_named_pair(component what) const
	{
		if (what < countof)
			return std::make_pair(component_names[what], get(what));
		throw(std::out_of_range("invalid component index"));
	}
	constexpr int count() const noexcept { return std::popcount(_present); } // upgrade to std::bitset when constexpr in c++23
	constexpr uri_len_t get_present() const noexcept { return _present; }
	constexpr void set(component what=countof) noexcept { what == countof ? _present = (1 << countof) - 1 : _present |= (1 << what); }
	constexpr void clear(component what=countof) noexcept { what == countof ? _present = 0 : _present &= ~(1 << what); }
	constexpr bool test(component what=countof) const noexcept { return what == countof ? _present : _present & (1 << what); }

	constexpr int parse()
	{
		if (_source.empty())
			return 0;
		if (_source.size() > uri_max_len)
			throw(std::out_of_range("uri too long"));
		if (_source.find_first_of("\t\r\n ") != std::string_view::npos)
			throw(std::logic_error("invalid uri"));
		std::string_view::size_type pos{}, hst{}, pth{std::string_view::npos};
		if (const auto sch {_source.find_first_of(':')}; sch != std::string_view::npos)
		{
			_ranges[scheme] = std::make_pair(0, sch);
			set(scheme);
			pos = sch + 1;
		}
		if (auto auth {_source.find("//", pos)}; auth != std::string_view::npos)
		{
			auth += 2;
			if ((pth = _source.find_first_of('/', auth)) == std::string_view::npos) // unterminated path
				pth = _source.size();
			_ranges[authority] = std::make_pair(auth, pth - auth);
			set(authority);
			if (const auto usr {_source.find_first_of('@', auth)}; usr != std::string_view::npos && usr < pth)
			{
				if (const auto pw {_source.find_first_of(':', auth)}; pw != std::string_view::npos && pw < usr) // no nested ':' before '@'
				{
					_ranges[user] = std::make_pair(auth, pw - auth);
					if (usr - pw - 1 > 0)
					{
						_ranges[password] = std::make_pair(pw + 1, usr - pw - 1);
						set(password);
					}
				}
				else
					_ranges[user] = std::make_pair(auth, usr - auth);
				set(user);
				hst = pos = usr + 1;
			}
			else
				hst = pos = auth;

			if (auto prt { _source.find_first_of(':', pos) }; prt != std::string_view::npos)
			{
				if (auto autstr {get(authority)}; autstr.front() != '[' && autstr.back() != ']')
				{
					++prt;
					if (_source.size() - prt > 0)
					{
						_ranges[port] = std::make_pair(prt, _source.size() - prt);
						set(port);
					}
				}
			}
		}
		if (pth != std::string_view::npos)
		{
			if (test(port))
			{
				if (pth - _ranges[port].first == 0) // remove empty port
					clear(port);
				else
					_ranges[port].second = pth - _ranges[port].first;
				_ranges[host] = std::make_pair(hst, _ranges[port].first - 1 - hst);
			}
			else
				_ranges[host] = std::make_pair(hst, pth - hst);
			if (_ranges[host].second)
				set(host);
			_ranges[path] = std::make_pair(pth, _source.size() - pth);
			set(path);
		}
		if (pth == std::string_view::npos)
		{
			set(path);
			if ((pth = _source.find_first_of('/', pos)) != std::string_view::npos)
				_ranges[path] = std::make_pair(pth, _source.size() - pth);
			else if (test(scheme))
				_ranges[path] = std::make_pair(pos, _source.size() - pos);
			else
				clear(path);
		}
		if (const auto qur {_source.find_first_of('?', pos)}; qur != std::string_view::npos)
		{
			if (test(path))
				_ranges[path].second = qur - _ranges[path].first;
			_ranges[query] = std::make_pair(qur + 1, _source.size() - qur);
			set(query);
		}
		if (const auto fra {_source.find_first_of('#', pos)}; fra != std::string_view::npos)
		{
			if (test(query))
				_ranges[query].second = fra - _ranges[query].first;
			_ranges[fragment] = std::make_pair(fra + 1, _source.size() - fra);
			set(fragment);
		}
		return count();
	}

	template<char valuepair='&',char valueequ='='>
	constexpr query_result decode_query() const
	{
		constexpr auto decpair([](std::string_view src) noexcept ->value_pair
		{
			if (auto fnd { src.find_first_of(valueequ) }; fnd != std::string::npos)
				return {src.substr(0, fnd), src.substr(fnd + 1)};
			else if (src.size())
				return {src, ""};
			return {};
		});
		query_result result;
		if (test(query))
		{
			std::string_view src{get(query)};
			for (std::string::size_type pos{};;)
			{
				if (auto fnd { src.find_first_of(valuepair, pos) }; fnd != std::string::npos)
				{
					result.emplace_back(decpair(src.substr(pos, fnd - pos)));
					pos = fnd + 1;
					continue;
				}
				if (pos < src.size())
					result.emplace_back(decpair(src.substr(pos, src.size() - pos)));
				break;
			}
		}
		return result;
	}

	static constexpr std::string_view::size_type find_hex(std::string_view src) noexcept
	{
		for (std::string_view::size_type fnd{}; ((fnd = src.find_first_of('%', fnd))) != std::string_view::npos; fnd += 3)
			if (fnd + 2 < src.size() && std::isxdigit(src[fnd + 1]) && std::isxdigit(src[fnd + 2]))
				return fnd;
		return std::string_view::npos;
	}
	static constexpr bool has_hex(std::string_view src) noexcept { return find_hex(src) != std::string_view::npos; }
	static constexpr std::string decode_hex(std::string_view src)
	{
		std::string result{src};
		for (std::string_view::size_type fnd; ((fnd = find_hex(result))) != std::string_view::npos; )
			result.replace(fnd, 3, 1, ((result[fnd + 1] & 0xF) + (result[fnd + 1] >> 6) * 9) << 4
				| ((result[fnd + 2] & 0xF) + (result[fnd + 2] >> 6) * 9));
		return result;
	}
	static constexpr std::string_view get_name(component what)
	{
		if (what < countof)
			return component_names[what];
		throw(std::out_of_range("invalid component index"));
	}

	friend std::ostream& operator<<(std::ostream& os, const basic_uri& what)
	{
		os << std::setw(12) << std::left << "source" << what._source << '\n';
		for (component ii{}; ii != countof; ii = component(ii + 1))
		{
			if (what.test(ii))
			{
				os << std::setw(12) << std::left << what.get_name(ii)
					<< (what.get(ii).size() ? what.get(ii) : "(empty)") << '\n';
				if (ii == query)
					for (auto qresult { what.decode_query() }; const auto [tag,value] : qresult)
						os << "   " << std::setw(12) << std::left << tag << (value.size() ? value : "(empty)") << '\n';
			}
		}
		return os;
	}
};

//-----------------------------------------------------------------------------------------
class uri_storage
{
protected:
	std::string _buffer;
	constexpr uri_storage(std::string src) noexcept : _buffer(std::move(src)) {}
	constexpr uri_storage() = delete;
	~uri_storage() = default;
};

//-----------------------------------------------------------------------------------------
class uri : private uri_storage, public basic_uri
{
public:
	constexpr uri(std::string src, bool decode=true)
		: uri_storage(decode && uri::has_hex(src) ? uri::decode_hex(src) : std::move(src)), basic_uri(_buffer) {}
	constexpr uri() = default;
	~uri() = default;

	constexpr std::string replace(std::string src)
	{
		auto rbuf { std::exchange(_buffer, std::move(src)) };
		assign(_buffer);
		return rbuf;
	}
	constexpr const std::string& get_buffer() const noexcept { return _buffer; }
};

} // FIX8
#endif // FIX8_URI_HPP_
